{"version":3,"sources":["utilities.js","components/Row.js","components/Results.js","components/SearchForm.js","sort.js","components/ChartLine.js","App.js","serviceWorker.js","index.js"],"names":["getSeconds","time","timeArray","split","length","seconds","forEach","item","i","parseInt","Math","pow","pluck","objectArray","element","uniqueList","hasOwnProperty","includes","push","sort","getDataFromServer","endpoint","a","data","fetch","method","headers","then","response","ok","Error","statusText","json","Row","Name","Time","Category","Year","Results","map","key","SearchForm","years","setYear","filterName","categories","setCategory","useState","name","setName","handleClick","e","year","currentTarget","dataset","id","handleClickCategories","category","listStyle","float","textDecoration","padding","onClick","data-id","style","className","placeholder","onChange","target","value","sortByTime","b","secondsA","secondsB","sortByYear","ChartLine","filteredData","times","round","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","width","height","App","setData","setFilteredData","setYears","setCategories","isOnePerson","setIsOnePerson","useEffect","categoriesData","unshift","maxWidth","filter","toLowerCase","newFilteredData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5580f38.chunk.js","sourcesContent":["export function getSeconds(time) {\n    const DIVIDER = ':'\n    let timeArray = time.split(DIVIDER)\n\n    let length = timeArray.length\n    let seconds = 0\n    timeArray.forEach((item, i) => {\n        seconds += parseInt(item) * (Math.pow(60, (length - i - 1)))\n    })\n    return seconds;\n}\n\nexport const pluck = function (objectArray, element) {\n    let uniqueList = []\n    objectArray.forEach(item => {\n        if (item.hasOwnProperty(element)) {\n            if (!uniqueList.includes(item[element])) uniqueList.push(item[element])\n        }\n    })\n    return uniqueList.sort()\n}\n\nexport const getDataFromServer = async function (endpoint) {\n    let data = fetch(endpoint, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    })\n        .then((response) => {\n            if (!response.ok) throw Error(response.statusText);\n            return response;\n        })\n        .then(response => response.json())\n\n    return await data\n}\n\nexport function getSummaryFromObject(objectData, objectKey, limit = 10) {\n\n    let summary = new Map()\n    if (!objectData) return [];\n    if (objectData.length < 1) return [];\n\n    objectData.forEach(item => {\n        let key = item[objectKey];\n        if (summary.has(key)) {\n            let count = summary.get(key)\n            summary.set(key, count + 1)\n        } else {\n            summary.set(key, 1)\n        }\n    })\n\n    // convert map to array\n    let summaryArray = []\n    summary.forEach((value, key) => {\n        let percent = ((value / objectData.length) * 100).toFixed(1)\n        let object = { key, value, percent }\n        summaryArray.push(object)\n    })\n\n    summaryArray.sort((a, b) => {\n        return b.value - a.value\n    })\n\n    return summaryArray.slice(0, limit);\n}\n\n\nexport function getSummaryFromObject2D(objectData, objectKeys, limit = 10) {\n\n    let summary = []\n    if (!objectData) return [];\n    if (objectData.length < 1) return [];\n\n    objectData.forEach(item => {\n        //    let arrayKey = [ item[objectKeys[0]] , item[objectKeys[1]] ]\n        let arrayKey = item[objectKeys[0]] + '~' + item[objectKeys[1]]\n        if (summary.hasOwnProperty(arrayKey)) {\n            summary[arrayKey] += 1\n        } else {\n            summary[arrayKey] = 1\n        }\n\n    })\n\n    // convert map to array\n    let summaryArray = []\n    for (let key in summary) {\n        let value = summary[key]\n        let percent = ((value / objectData.length) * 100).toFixed(1)\n        let keys = key.split('~')\n        let object = { keyA: keys[0], keyB: keys[1], value, percent }\n        summaryArray.push(object)\n    }\n\n    summaryArray.sort((a, b) => {\n        return b.value - a.value\n    })\n\n    return summaryArray.slice(0, limit);\n}\n","import React from 'react'\n\nfunction Row({ data }) {\n  return (\n    <tr>\n      <td>{data.Name}</td>\n      <td>{data.Time}</td>\n      <td>{data.Category}</td>\n      <td>{data.Year}</td>\n    </tr>\n  )\n}\n\nexport default Row\n","import React from 'react'\nimport Row from './Row'\n\nfunction Results({ data }) {\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Time</th>\n            <th>Category</th>\n            <th>Year</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map(item =>\n            <Row key={item.Name + item.Time + item.Year} data={item} />\n          )}\n        </tbody>\n      </table>\n\n\n    </div>\n  )\n}\n\nexport default Results\n\n","import React, { useState } from 'react'\nimport '../styles/SearchForm.css'\n\nfunction SearchForm({ years, setYear, filterName, categories, setCategory }) {\n\n  const [name, setName] = useState('');\n\n  function handleChange(e) {\n    let name = e.target.value\n    setName(name)\n    filterName(name)\n  }\n\n  function handleClick(e) {\n    let year = e.currentTarget.dataset.id\n    setName('')\n    setYear(parseInt(year))\n  }\n\n  function handleClickCategories(e) {\n    let category = e.currentTarget.dataset.id\n    setName('')\n    setCategory(category)\n  }\n  const listStyle = { float: 'left', textDecoration: 'underline', listStyle: 'none', padding: '10px' }\n\n  return (\n    <div>\n      <ul>\n        {years.map(item => <li onClick={handleClick} key={item} data-id={item} style={listStyle}>{item}</li>)}\n      </ul>\n      <ul>\n        {categories.map(item => <li onClick={handleClickCategories} key={item} data-id={item} style={listStyle}>{item}</li>)}\n      </ul>\n      <br />\n      <input className=\"clearfix\" placeholder=\"search...\" onChange={handleChange} value={name} />\n    </div>\n  )\n}\n\nexport default SearchForm\n","import { getSeconds } from './utilities'\n\nexport function sortByTime(a, b) {\n  let secondsA = getSeconds(a.Time)\n  let secondsB = getSeconds(b.Time)\n  if (secondsA > secondsB) {\n    return 1;\n  }\n  if (secondsB > secondsA) {\n    return -1;\n  }\n  return 0;\n}\n\nexport function sortByName(a, b) {\n  return (a.Name > b.Name) ? 1 : (a.Name < b.Name) ? -1 : 0\n}\n\nexport function sortByYear(a, b) {\n  return (a.Year > b.Year) ? 1 : (a.Year < b.Year) ? -1 : 0\n}","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { pluck, getSeconds } from '../utilities'\nimport { sortByYear } from '../sort'\n\nfunction ChartLine({ filteredData }) {\n\n  let times = filteredData.sort(sortByYear).map(item => {\n    let time = getSeconds(item.Time) / 60\n    return Math.round(time * 1000) / 1000\n  })\n\n  const data = {\n    labels: pluck(filteredData, 'Year'),\n    datasets: [\n      {\n        label: filteredData[0].Name,\n        backgroundColor: 'rgba(255,99,132,0.2)',\n        borderColor: 'rgba(255,99,132,1)',\n        borderWidth: 1,\n        hoverBackgroundColor: 'rgba(255,99,132,0.4)',\n        hoverBorderColor: 'rgba(255,99,132,1)',\n        data: times\n      }\n    ]\n  };\n\n  return (\n    <>\n      <Line\n        data={data}\n        width={100}\n        height={50}\n      />\n    </>\n  )\n}\n\nexport default ChartLine\n","import React, { useState, useEffect } from 'react';\nimport { getDataFromServer } from './utilities'\nimport './styles/skeleton.css';\nimport Results from './components/Results'\nimport SearchForm from './components/SearchForm'\nimport { pluck } from './utilities'\nimport ChartLine from './components/ChartLine'\nimport { sortByTime } from './sort'\n\nfunction App() {\n\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState([]);\n  const [years, setYears] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const [isOnePerson, setIsOnePerson] = useState(false);\n\n  useEffect(() => {\n    getDataFromServer('race2rocks.json')\n      .then(data => {\n        setData(data)\n        setFilteredData(data.sort(sortByTime))\n        setYears(pluck(data, 'Year'))\n        let categoriesData = pluck(data, 'Category')\n        categoriesData.unshift('All')\n        setCategories(categoriesData)\n\n      })\n  }, [])\n\n  function filterName(name) {\n    let filteredData = data.filter(item =>\n      item.Name.toLowerCase().includes(name.toLowerCase())\n    )\n    setFilteredData(filteredData)\n\n    let nameList = pluck(filteredData, 'Name')\n    if (nameList.length === 1) {\n      setIsOnePerson(true)\n    } else {\n      setIsOnePerson(false)\n    }\n  }\n\n  function setYear(year) {\n    let filteredData = data.filter(item =>\n      item.Year === year\n    )\n    setFilteredData(filteredData)\n    setIsOnePerson(false)\n  }\n\n  function setCategory(category) {\n    if (category === 'All') {\n      setFilteredData(data)\n    } else {\n      let newFilteredData = data.filter(item =>\n        item.Category === category\n      )\n      setFilteredData(newFilteredData)\n      setIsOnePerson(false)\n    }\n  }\n\n  return (\n    <div className=\"App container\" style={{ maxWidth: '400px' }}>\n      <h1>Race to the Rocks</h1>\n      <SearchForm\n        years={years}\n        setYear={setYear}\n        filterName={filterName}\n        categories={categories}\n        setCategory={setCategory}\n      />\n      {isOnePerson ?\n        <ChartLine filteredData={filteredData} /> :\n        ''}\n      <Results data={filteredData} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}